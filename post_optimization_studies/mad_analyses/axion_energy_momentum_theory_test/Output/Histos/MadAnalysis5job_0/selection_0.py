def selection_0():

    # Library import
    import numpy
    import matplotlib
    import matplotlib.pyplot   as plt
    import matplotlib.gridspec as gridspec

    # Library version
    matplotlib_version = matplotlib.__version__
    numpy_version      = numpy.__version__

    # Histo binning
    xBinning = numpy.linspace(0.0,3000.0,201,endpoint=True)

    # Creating data sequence: middle of each bin
    xData = numpy.array([7.5,22.5,37.5,52.5,67.5,82.5,97.5,112.5,127.5,142.5,157.5,172.5,187.5,202.5,217.5,232.5,247.5,262.5,277.5,292.5,307.5,322.5,337.5,352.5,367.5,382.5,397.5,412.5,427.5,442.5,457.5,472.5,487.5,502.5,517.5,532.5,547.5,562.5,577.5,592.5,607.5,622.5,637.5,652.5,667.5,682.5,697.5,712.5,727.5,742.5,757.5,772.5,787.5,802.5,817.5,832.5,847.5,862.5,877.5,892.5,907.5,922.5,937.5,952.5,967.5,982.5,997.5,1012.5,1027.5,1042.5,1057.5,1072.5,1087.5,1102.5,1117.5,1132.5,1147.5,1162.5,1177.5,1192.5,1207.5,1222.5,1237.5,1252.5,1267.5,1282.5,1297.5,1312.5,1327.5,1342.5,1357.5,1372.5,1387.5,1402.5,1417.5,1432.5,1447.5,1462.5,1477.5,1492.5,1507.5,1522.5,1537.5,1552.5,1567.5,1582.5,1597.5,1612.5,1627.5,1642.5,1657.5,1672.5,1687.5,1702.5,1717.5,1732.5,1747.5,1762.5,1777.5,1792.5,1807.5,1822.5,1837.5,1852.5,1867.5,1882.5,1897.5,1912.5,1927.5,1942.5,1957.5,1972.5,1987.5,2002.5,2017.5,2032.5,2047.5,2062.5,2077.5,2092.5,2107.5,2122.5,2137.5,2152.5,2167.5,2182.5,2197.5,2212.5,2227.5,2242.5,2257.5,2272.5,2287.5,2302.5,2317.5,2332.5,2347.5,2362.5,2377.5,2392.5,2407.5,2422.5,2437.5,2452.5,2467.5,2482.5,2497.5,2512.5,2527.5,2542.5,2557.5,2572.5,2587.5,2602.5,2617.5,2632.5,2647.5,2662.5,2677.5,2692.5,2707.5,2722.5,2737.5,2752.5,2767.5,2782.5,2797.5,2812.5,2827.5,2842.5,2857.5,2872.5,2887.5,2902.5,2917.5,2932.5,2947.5,2962.5,2977.5,2992.5])

    # Creating weights for histo: y1_E_0
    y1_E_0_weights = numpy.array([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.83713414726,0.0,7.67426749453,3.83713414726,3.83713414726,3.83713414726,3.83713414726,3.83713414726,11.5114032418,15.3485349891,15.3485349891,7.67426749453,11.5114032418,15.3485349891,3.83713414726,19.1856707363,3.83713414726,11.5114032418,15.3485349891,23.0228024836,42.2084772199,7.67426749453,26.8599382308,26.8599382308,19.1856707363,7.67426749453,23.0228024836,23.0228024836,11.5114032418,11.5114032418,26.8599382308,11.5114032418,26.8599382308,23.0228024836,7.67426749453,42.2084772199,19.1856707363,19.1856707363,26.8599382308,26.8599382308,15.3485349891,34.5342057254,19.1856707363,15.3485349891,34.5342057254,26.8599382308,23.0228024836,34.5342057254,23.0228024836,30.6970699781,23.0228024836,30.6970699781,23.0228024836,19.1856707363,23.0228024836,15.3485349891,23.0228024836,26.8599382308,15.3485349891,19.1856707363,19.1856707363,26.8599382308,19.1856707363,7.67426749453,26.8599382308,23.0228024836,15.3485349891,30.6970699781,19.1856707363,30.6970699781,19.1856707363,26.8599382308,19.1856707363,19.1856707363,19.1856707363,3.83713414726,19.1856707363,11.5114032418,11.5114032418,15.3485349891,15.3485349891,7.67426749453,19.1856707363,11.5114032418,19.1856707363,11.5114032418,7.67426749453,19.1856707363,15.3485349891,26.8599382308,19.1856707363,11.5114032418,11.5114032418,23.0228024836,7.67426749453,11.5114032418,7.67426749453,7.67426749453,11.5114032418,7.67426749453,7.67426749453,11.5114032418,7.67426749453,11.5114032418,15.3485349891,11.5114032418,3.83713414726,3.83713414726,11.5114032418,19.1856707363,7.67426749453,15.3485349891,7.67426749453,3.83713414726,7.67426749453,3.83713414726,15.3485349891,15.3485349891,3.83713414726,3.83713414726,15.3485349891,7.67426749453,7.67426749453,15.3485349891,11.5114032418,3.83713414726,3.83713414726,15.3485349891,3.83713414726,3.83713414726,0.0,15.3485349891,15.3485349891,0.0,3.83713414726,0.0,0.0,3.83713414726,3.83713414726,0.0,3.83713414726,0.0,19.1856707363,7.67426749453,19.1856707363,0.0,3.83713414726,7.67426749453,11.5114032418,7.67426749453,0.0,3.83713414726,7.67426749453,0.0,0.0,3.83713414726,0.0,7.67426749453,0.0,7.67426749453,0.0,0.0])

    # Creating a new Canvas
    fig   = plt.figure(figsize=(8,6),dpi=80)
    frame = gridspec.GridSpec(1,1)
    pad   = fig.add_subplot(frame[0])

    # Creating a new Stack
    pad.hist(x=xData, bins=xBinning, weights=y1_E_0_weights,\
             label="$signal$", histtype="stepfilled", rwidth=1.0,\
             color="#5954d8", edgecolor="#5954d8", linewidth=1, linestyle="solid",\
             bottom=None, cumulative=False, normed=False, align="mid", orientation="vertical")


    # Axis
    plt.rc('text',usetex=False)
    plt.xlabel(r"P [ ax ]   ( GeV ) ",\
               fontsize=16,color="black")
    plt.ylabel(r"$\mathrm{Events}$ $(\mathcal{L}_{\mathrm{int}} = 40.0\ \mathrm{fb}^{-1})$ ",\
               fontsize=16,color="black")

    # Boundary of y-axis
    ymax=(y1_E_0_weights).max()*1.1
    ymin=0 # linear scale
    #ymin=min([x for x in (y1_E_0_weights) if x])/100. # log scale
    plt.gca().set_ylim(ymin,ymax)

    # Log/Linear scale for X-axis
    plt.gca().set_xscale("linear")
    #plt.gca().set_xscale("log",nonposx="clip")

    # Log/Linear scale for Y-axis
    plt.gca().set_yscale("linear")
    #plt.gca().set_yscale("log",nonposy="clip")

    # Saving the image
    plt.savefig('../../HTML/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../PDF/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../DVI/MadAnalysis5job_0/selection_0.eps')

# Running!
if __name__ == '__main__':
    selection_0()
