def selection_0():

    # Library import
    import numpy
    import matplotlib
    import matplotlib.pyplot   as plt
    import matplotlib.gridspec as gridspec

    # Library version
    matplotlib_version = matplotlib.__version__
    numpy_version      = numpy.__version__

    # Histo binning
    xBinning = numpy.linspace(0.0,2000.0,201,endpoint=True)

    # Creating data sequence: middle of each bin
    xData = numpy.array([5.0,15.0,25.0,35.0,45.0,55.0,65.0,75.0,85.0,95.0,105.0,115.0,125.0,135.0,145.0,155.0,165.0,175.0,185.0,195.0,205.0,215.0,225.0,235.0,245.0,255.0,265.0,275.0,285.0,295.0,305.0,315.0,325.0,335.0,345.0,355.0,365.0,375.0,385.0,395.0,405.0,415.0,425.0,435.0,445.0,455.0,465.0,475.0,485.0,495.0,505.0,515.0,525.0,535.0,545.0,555.0,565.0,575.0,585.0,595.0,605.0,615.0,625.0,635.0,645.0,655.0,665.0,675.0,685.0,695.0,705.0,715.0,725.0,735.0,745.0,755.0,765.0,775.0,785.0,795.0,805.0,815.0,825.0,835.0,845.0,855.0,865.0,875.0,885.0,895.0,905.0,915.0,925.0,935.0,945.0,955.0,965.0,975.0,985.0,995.0,1005.0,1015.0,1025.0,1035.0,1045.0,1055.0,1065.0,1075.0,1085.0,1095.0,1105.0,1115.0,1125.0,1135.0,1145.0,1155.0,1165.0,1175.0,1185.0,1195.0,1205.0,1215.0,1225.0,1235.0,1245.0,1255.0,1265.0,1275.0,1285.0,1295.0,1305.0,1315.0,1325.0,1335.0,1345.0,1355.0,1365.0,1375.0,1385.0,1395.0,1405.0,1415.0,1425.0,1435.0,1445.0,1455.0,1465.0,1475.0,1485.0,1495.0,1505.0,1515.0,1525.0,1535.0,1545.0,1555.0,1565.0,1575.0,1585.0,1595.0,1605.0,1615.0,1625.0,1635.0,1645.0,1655.0,1665.0,1675.0,1685.0,1695.0,1705.0,1715.0,1725.0,1735.0,1745.0,1755.0,1765.0,1775.0,1785.0,1795.0,1805.0,1815.0,1825.0,1835.0,1845.0,1855.0,1865.0,1875.0,1885.0,1895.0,1905.0,1915.0,1925.0,1935.0,1945.0,1955.0,1965.0,1975.0,1985.0,1995.0])

    # Creating weights for histo: y1_PT_0
    y1_PT_0_weights = numpy.array([0.0,0.0,28.296178067,37.728234756,34.5842145263,78.6004857416,100.608607349,69.1684450526,119.472728727,125.760769187,150.912931024,141.480890335,179.209133091,154.056971253,182.35313332,216.937335847,207.505295158,220.081376076,232.657456995,251.521578373,226.369416536,257.809618832,223.225376306,251.521578373,323.834023655,270.385699751,286.105780899,317.545983196,301.825862048,295.537861588,286.105780899,342.698145033,286.105780899,330.122064115,298.681861818,295.537861588,326.978023885,427.586831234,279.81774044,348.986185493,367.850306871,367.850306871,292.393821359,336.410104574,361.562266411,339.554104804,345.842145263,336.410104574,301.825862048,298.681861818,333.266064344,311.257942737,352.130185722,367.850306871,267.241659521,352.130185722,317.545983196,361.562266411,326.978023885,292.393821359,342.698145033,339.554104804,323.834023655,314.401942966,326.978023885,229.513416765,311.257942737,289.249821129,311.257942737,251.521578373,257.809618832,304.969902277,279.81774044,298.681861818,304.969902277,242.089497684,245.233537914,235.801457225,260.953619062,235.801457225,282.96178067,298.681861818,229.513416765,248.377538143,220.081376076,257.809618832,207.505295158,216.937335847,182.35313332,213.793335617,207.505295158,182.35313332,245.233537914,191.785214009,147.768930794,163.489011942,154.056971253,201.217254698,154.056971253,169.777052402,182.35313332,204.361254928,132.048809646,160.345011713,150.912931024,125.760769187,185.49717355,138.336850105,150.912931024,154.056971253,116.328728498,119.472728727,106.896647809,97.4646071196,138.336850105,122.616768957,113.184688268,135.192849876,113.184688268,119.472728727,141.480890335,119.472728727,100.608607349,72.3124452822,103.752647579,72.3124452822,84.8885262009,78.6004857416,75.4564855119,81.7445259712,91.1765666602,66.0244048229,75.4564855119,84.8885262009,72.3124452822,50.3043236746,72.3124452822,50.3043236746,59.7363643636,53.4483239043,47.1602834449,66.0244048229,59.7363643636,37.728234756,31.4401942966,59.7363643636,25.1521578373,59.7363643636,44.0162832153,34.5842145263,53.4483239043,22.0081376076,53.4483239043,44.0162832153,37.728234756,50.3043236746,40.8722429856,34.5842145263,31.4401942966,47.1602834449,37.728234756,37.728234756,40.8722429856,12.5760769187,25.1521578373,34.5842145263,44.0162832153,44.0162832153,15.7200971483,37.728234756,37.728234756,40.8722429856,18.864117378,22.0081376076,25.1521578373,22.0081376076,28.296178067,31.4401942966,28.296178067,28.296178067,18.864117378,25.1521578373,22.0081376076,22.0081376076,25.1521578373,6.28804045933,12.5760769187,9.43206068899,15.7200971483,12.5760769187,18.864117378,18.864117378,6.28804045933,12.5760769187,6.28804045933,9.43206068899,6.28804045933,15.7200971483,12.5760769187,9.43206068899])

    # Creating a new Canvas
    fig   = plt.figure(figsize=(8,6),dpi=80)
    frame = gridspec.GridSpec(1,1)
    pad   = fig.add_subplot(frame[0])

    # Creating a new Stack
    pad.hist(x=xData, bins=xBinning, weights=y1_PT_0_weights,\
             label="$signal$", histtype="stepfilled", rwidth=1.0,\
             color="#5954d8", edgecolor="#5954d8", linewidth=1, linestyle="solid",\
             bottom=None, cumulative=False, normed=False, align="mid", orientation="vertical")


    # Axis
    plt.rc('text',usetex=False)
    plt.xlabel(r"p_{T} [ j_{1} ]   ( GeV ) ",\
               fontsize=16,color="black")
    plt.ylabel(r"$\mathrm{Events}$ $(\mathcal{L}_{\mathrm{int}} = 40.0\ \mathrm{fb}^{-1})$ ",\
               fontsize=16,color="black")

    # Boundary of y-axis
    ymax=(y1_PT_0_weights).max()*1.1
    ymin=0 # linear scale
    #ymin=min([x for x in (y1_PT_0_weights) if x])/100. # log scale
    plt.gca().set_ylim(ymin,ymax)

    # Log/Linear scale for X-axis
    plt.gca().set_xscale("linear")
    #plt.gca().set_xscale("log",nonposx="clip")

    # Log/Linear scale for Y-axis
    plt.gca().set_yscale("linear")
    #plt.gca().set_yscale("log",nonposy="clip")

    # Saving the image
    plt.savefig('../../HTML/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../PDF/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../DVI/MadAnalysis5job_0/selection_0.eps')

# Running!
if __name__ == '__main__':
    selection_0()
