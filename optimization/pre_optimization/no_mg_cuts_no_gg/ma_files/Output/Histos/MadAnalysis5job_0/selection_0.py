def selection_0():

    # Library import
    import numpy
    import matplotlib
    import matplotlib.pyplot   as plt
    import matplotlib.gridspec as gridspec

    # Library version
    matplotlib_version = matplotlib.__version__
    numpy_version      = numpy.__version__

    # Histo binning
    xBinning = numpy.linspace(0.0,2000.0,201,endpoint=True)

    # Creating data sequence: middle of each bin
    xData = numpy.array([5.0,15.0,25.0,35.0,45.0,55.0,65.0,75.0,85.0,95.0,105.0,115.0,125.0,135.0,145.0,155.0,165.0,175.0,185.0,195.0,205.0,215.0,225.0,235.0,245.0,255.0,265.0,275.0,285.0,295.0,305.0,315.0,325.0,335.0,345.0,355.0,365.0,375.0,385.0,395.0,405.0,415.0,425.0,435.0,445.0,455.0,465.0,475.0,485.0,495.0,505.0,515.0,525.0,535.0,545.0,555.0,565.0,575.0,585.0,595.0,605.0,615.0,625.0,635.0,645.0,655.0,665.0,675.0,685.0,695.0,705.0,715.0,725.0,735.0,745.0,755.0,765.0,775.0,785.0,795.0,805.0,815.0,825.0,835.0,845.0,855.0,865.0,875.0,885.0,895.0,905.0,915.0,925.0,935.0,945.0,955.0,965.0,975.0,985.0,995.0,1005.0,1015.0,1025.0,1035.0,1045.0,1055.0,1065.0,1075.0,1085.0,1095.0,1105.0,1115.0,1125.0,1135.0,1145.0,1155.0,1165.0,1175.0,1185.0,1195.0,1205.0,1215.0,1225.0,1235.0,1245.0,1255.0,1265.0,1275.0,1285.0,1295.0,1305.0,1315.0,1325.0,1335.0,1345.0,1355.0,1365.0,1375.0,1385.0,1395.0,1405.0,1415.0,1425.0,1435.0,1445.0,1455.0,1465.0,1475.0,1485.0,1495.0,1505.0,1515.0,1525.0,1535.0,1545.0,1555.0,1565.0,1575.0,1585.0,1595.0,1605.0,1615.0,1625.0,1635.0,1645.0,1655.0,1665.0,1675.0,1685.0,1695.0,1705.0,1715.0,1725.0,1735.0,1745.0,1755.0,1765.0,1775.0,1785.0,1795.0,1805.0,1815.0,1825.0,1835.0,1845.0,1855.0,1865.0,1875.0,1885.0,1895.0,1905.0,1915.0,1925.0,1935.0,1945.0,1955.0,1965.0,1975.0,1985.0,1995.0])

    # Creating weights for histo: y1_PT_0
    y1_PT_0_weights = numpy.array([0.0,0.0,15.1562664827,33.9909936843,47.1828971124,53.747296823,58.0526482402,59.1986019744,61.1062329839,61.9980677699,62.7036605895,61.4144776291,61.8289349604,60.9740767399,60.1420040788,58.0877859712,56.5017911198,55.1757115432,53.137563251,52.0221101866,49.9398298638,48.6982567299,46.6651452456,45.1725312127,42.8870596655,41.34995383,39.8961392074,38.3058031074,36.6276826421,35.3726700257,33.8862880431,31.8592926827,31.204423716,29.7980750111,28.5403041428,27.7466431376,26.8224768423,25.2630331637,24.6793990508,23.6576545971,22.5227218782,21.669270766,21.2030102657,20.035202382,19.637858205,18.8972395834,17.8545044329,17.2020779182,16.7423772606,16.0780822678,15.5443125526,15.0099751971,14.3416467605,13.7773523908,13.2013574364,12.7737684276,12.2555608496,11.6920299959,11.8218077473,10.7881308559,10.1989362671,10.2870404297,9.46700813781,9.50645513767,9.41379386318,9.07217436979,8.64520496823,8.2364160445,8.10882090988,7.84859783027,7.54693301499,7.24498837705,6.98512506943,6.65301954641,6.53893984618,6.16316200118,6.19299909146,5.72195762125,5.61481752293,5.43867315714,5.34073522681,5.14375206792,4.89488579076,4.73906454487,4.55840703935,4.33113107898,4.48605689237,3.95222121894,3.91021184303,3.89186227236,3.77580342644,3.72693959464,3.57335533103,3.41108936959,3.4088951602,3.14176245966,3.18344204458,2.99550835046,2.86550794022,2.8027025441,2.57979621442,2.61939431852,2.48256943339,2.57046972523,2.36155572769,2.40347036365,2.34765094007,2.17372876592,1.99250561888,1.88776120227,2.03172676188,1.94599069843,1.89726757746,1.81351625615,1.7670896797,1.69994143594,1.61609977188,1.58833776648,1.49306454735,1.51166715766,1.36992698768,1.23310929799,1.28396626661,1.33751273071,1.26788006149,1.27251672293,1.23987980708,1.1263429628,1.09382277297,1.13100280955,1.06340684953,0.894090956089,0.958993023404,0.931238213442,0.92437056592,0.873084669147,0.856757816541,0.854549616022,0.740733348834,0.752389961276,0.754830814348,0.743031892097,0.682798465958,0.694304373912,0.682710121947,0.62233918296,0.652539642953,0.573540909617,0.629250003121,0.566568928217,0.513196353908,0.55495828664,0.534094709254,0.501553732599,0.448210739542,0.448185955249,0.452805027841,0.406378451399,0.411064681428,0.413358027985,0.362244222146,0.348319447187,0.376079533804,0.373836515352,0.383082695443,0.334383319422,0.350593206157,0.257768355336,0.329739462538,0.301842822463,0.288009069817,0.271693649966,0.213588714863,0.241465807326,0.253117582834,0.185816635846,0.273993952114,0.192810963083,0.222926916634,0.178763026179,0.176521566739,0.195007690873,0.206783507768,0.218266510238,0.190443263649,0.188103986202,0.157844603552,0.143964640192,0.185785535556,0.143968637659,0.164865633866,0.125428187954,0.137009328228,0.127667049042,0.146328981755,0.109154221831,0.137029115688,0.13934984489,0.111488062723,0.123088150989])

    # Creating a new Canvas
    fig   = plt.figure(figsize=(8,6),dpi=80)
    frame = gridspec.GridSpec(1,1)
    pad   = fig.add_subplot(frame[0])

    # Creating a new Stack
    pad.hist(x=xData, bins=xBinning, weights=y1_PT_0_weights,\
             label="$signal$", histtype="stepfilled", rwidth=1.0,\
             color="#5954d8", edgecolor="#5954d8", linewidth=1, linestyle="solid",\
             bottom=None, cumulative=False, normed=False, align="mid", orientation="vertical")


    # Axis
    plt.rc('text',usetex=False)
    plt.xlabel(r"p_{T} [ j_{1} ]   ( GeV ) ",\
               fontsize=16,color="black")
    plt.ylabel(r"$\mathrm{Events}$ $(\mathcal{L}_{\mathrm{int}} = 40.0\ \mathrm{fb}^{-1})$ ",\
               fontsize=16,color="black")

    # Boundary of y-axis
    ymax=(y1_PT_0_weights).max()*1.1
    ymin=0 # linear scale
    #ymin=min([x for x in (y1_PT_0_weights) if x])/100. # log scale
    plt.gca().set_ylim(ymin,ymax)

    # Log/Linear scale for X-axis
    plt.gca().set_xscale("linear")
    #plt.gca().set_xscale("log",nonposx="clip")

    # Log/Linear scale for Y-axis
    plt.gca().set_yscale("linear")
    #plt.gca().set_yscale("log",nonposy="clip")

    # Saving the image
    plt.savefig('../../HTML/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../PDF/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../DVI/MadAnalysis5job_0/selection_0.eps')

# Running!
if __name__ == '__main__':
    selection_0()
