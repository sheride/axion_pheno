def selection_0():

    # Library import
    import numpy
    import matplotlib
    import matplotlib.pyplot   as plt
    import matplotlib.gridspec as gridspec

    # Library version
    matplotlib_version = matplotlib.__version__
    numpy_version      = numpy.__version__

    # Histo binning
    xBinning = numpy.linspace(-10.0,10.0,401,endpoint=True)

    # Creating data sequence: middle of each bin
    xData = numpy.array([-9.975,-9.925,-9.875,-9.825,-9.775,-9.725,-9.675,-9.625,-9.575,-9.525,-9.475,-9.425,-9.375,-9.325,-9.275,-9.225,-9.175,-9.125,-9.075,-9.025,-8.975,-8.925,-8.875,-8.825,-8.775,-8.725,-8.675,-8.625,-8.575,-8.525,-8.475,-8.425,-8.375,-8.325,-8.275,-8.225,-8.175,-8.125,-8.075,-8.025,-7.975,-7.925,-7.875,-7.825,-7.775,-7.725,-7.675,-7.625,-7.575,-7.525,-7.475,-7.425,-7.375,-7.325,-7.275,-7.225,-7.175,-7.125,-7.075,-7.025,-6.975,-6.925,-6.875,-6.825,-6.775,-6.725,-6.675,-6.625,-6.575,-6.525,-6.475,-6.425,-6.375,-6.325,-6.275,-6.225,-6.175,-6.125,-6.075,-6.025,-5.975,-5.925,-5.875,-5.825,-5.775,-5.725,-5.675,-5.625,-5.575,-5.525,-5.475,-5.425,-5.375,-5.325,-5.275,-5.225,-5.175,-5.125,-5.075,-5.025,-4.975,-4.925,-4.875,-4.825,-4.775,-4.725,-4.675,-4.625,-4.575,-4.525,-4.475,-4.425,-4.375,-4.325,-4.275,-4.225,-4.175,-4.125,-4.075,-4.025,-3.975,-3.925,-3.875,-3.825,-3.775,-3.725,-3.675,-3.625,-3.575,-3.525,-3.475,-3.425,-3.375,-3.325,-3.275,-3.225,-3.175,-3.125,-3.075,-3.025,-2.975,-2.925,-2.875,-2.825,-2.775,-2.725,-2.675,-2.625,-2.575,-2.525,-2.475,-2.425,-2.375,-2.325,-2.275,-2.225,-2.175,-2.125,-2.075,-2.025,-1.975,-1.925,-1.875,-1.825,-1.775,-1.725,-1.675,-1.625,-1.575,-1.525,-1.475,-1.425,-1.375,-1.325,-1.275,-1.225,-1.175,-1.125,-1.075,-1.025,-0.975,-0.925,-0.875,-0.825,-0.775,-0.725,-0.675,-0.625,-0.575,-0.525,-0.475,-0.425,-0.375,-0.325,-0.275,-0.225,-0.175,-0.125,-0.075,-0.025,0.025,0.075,0.125,0.175,0.225,0.275,0.325,0.375,0.425,0.475,0.525,0.575,0.625,0.675,0.725,0.775,0.825,0.875,0.925,0.975,1.025,1.075,1.125,1.175,1.225,1.275,1.325,1.375,1.425,1.475,1.525,1.575,1.625,1.675,1.725,1.775,1.825,1.875,1.925,1.975,2.025,2.075,2.125,2.175,2.225,2.275,2.325,2.375,2.425,2.475,2.525,2.575,2.625,2.675,2.725,2.775,2.825,2.875,2.925,2.975,3.025,3.075,3.125,3.175,3.225,3.275,3.325,3.375,3.425,3.475,3.525,3.575,3.625,3.675,3.725,3.775,3.825,3.875,3.925,3.975,4.025,4.075,4.125,4.175,4.225,4.275,4.325,4.375,4.425,4.475,4.525,4.575,4.625,4.675,4.725,4.775,4.825,4.875,4.925,4.975,5.025,5.075,5.125,5.175,5.225,5.275,5.325,5.375,5.425,5.475,5.525,5.575,5.625,5.675,5.725,5.775,5.825,5.875,5.925,5.975,6.025,6.075,6.125,6.175,6.225,6.275,6.325,6.375,6.425,6.475,6.525,6.575,6.625,6.675,6.725,6.775,6.825,6.875,6.925,6.975,7.025,7.075,7.125,7.175,7.225,7.275,7.325,7.375,7.425,7.475,7.525,7.575,7.625,7.675,7.725,7.775,7.825,7.875,7.925,7.975,8.025,8.075,8.125,8.175,8.225,8.275,8.325,8.375,8.425,8.475,8.525,8.575,8.625,8.675,8.725,8.775,8.825,8.875,8.925,8.975,9.025,9.075,9.125,9.175,9.225,9.275,9.325,9.375,9.425,9.475,9.525,9.575,9.625,9.675,9.725,9.775,9.825,9.875,9.925,9.975])

    # Creating weights for histo: y1_sdETA_0
    y1_sdETA_0_weights = numpy.array([0.0,0.00409408464734,0.0,0.00818816929469,0.0,0.00409408464734,0.0245645038841,0.0409408464734,0.0368467578261,0.0573171930628,0.0450349231208,0.0532230764155,0.0736934996522,0.0655053463575,0.0941639228889,0.0900698462416,0.110540269478,0.114634346126,0.126916616068,0.159669269246,0.188327885778,0.196516039073,0.229268692251,0.176045615836,0.155575192599,0.221080538957,0.278397732019,0.302962231903,0.307056308551,0.347997155024,0.364373501614,0.327526731788,0.454443227855,0.393032078145,0.470819614445,0.491289997681,0.544513154097,0.597736310512,0.589547917218,0.675523846812,0.704182623343,0.638677076986,0.790158152938,0.753311383111,0.822910926116,0.941639228889,0.978485998715,1.06855592496,1.12587307802,1.04399154507,1.27326015732,1.23231939085,1.41655323998,1.32648331374,1.51071716287,1.61306907905,1.62125747235,1.57622230923,1.69904500865,1.87509046448,1.9979131639,2.08798309015,2.15758223315,2.12482985997,2.31315770575,2.50967354482,2.52604993141,2.73894215707,2.6202138543,2.87404724644,3.08284547545,2.98458715591,3.23842054805,3.53728870331,3.45131277371,3.64782901278,3.74199293567,3.99992032446,4.17596458029,4.12683662052,4.35201243613,4.51168030537,4.55262027185,4.79417207404,5.20767573542,5.53110747056,5.69896333311,5.71124732305,5.95689112189,6.18206693749,6.46455870616,6.67335853517,6.86168638095,7.31203401216,7.43894990823,7.98755745897,8.28233321758,8.67536489572,8.88416072474,8.81046878509,9.5555921749,9.77667199386,10.4030674809,10.6650872663,11.238262797,11.655858455,12.1594300426,12.3723218683,12.9250254157,13.7847807116,14.3456722523,14.3988922087,15.6066472197,15.6394031929,16.589230415,16.7980262441,18.1777331142,19.1234683397,19.7539558234,20.7856669786,21.616762298,22.6239094732,23.6719926149,24.5522238941,26.2758304827,26.6729581574,28.4088487359,29.5101598341,31.4548502415,32.2531935878,33.9399562065,35.8969306039,36.6666179736,39.053468019,40.7934465941,43.3399645088,45.5098427319,46.1075622424,49.6898793088,51.4585578605,54.5372753393,57.3007930762,60.322230602,62.4020288988,65.1819066224,68.7724236821,72.256500829,75.7282579859,78.6268956122,82.0413328162,86.5898890913,88.7924872876,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,90.0493662584,84.9072104693,81.9144529201,78.188815971,74.4713790152,71.9125811106,68.9279835547,65.9147460223,63.56066795,60.0765908031,56.3550738507,54.4553954063,51.8638775285,49.5056794597,46.5742818602,45.3992828224,42.9878847971,41.5836059471,39.1066919754,37.8498090047,35.7782027011,33.8498882802,31.7823739733,30.5500549825,29.6002277603,28.4211327259,27.2829776579,25.6289670124,24.3352360718,23.5327967289,22.2595337716,21.8501261069,20.9903708109,19.6188519341,18.8368805744,17.6414095534,17.4776456875,16.3435826162,16.2248547134,15.5616152566,14.6772919807,13.6865247921,13.4040330234,12.4623937945,12.5156137509,11.8605622874,11.6108224919,11.3160467333,10.4767594206,10.3662195111,9.48190023525,9.42458028219,9.19940846658,9.14618451017,8.45428507677,8.06534539527,7.71734968024,7.32840999875,7.06229421667,6.98041428372,6.77161445471,6.32945481679,6.13293897772,5.82588322917,5.60889540686,5.36325160802,5.22405172201,5.34687562143,4.90471198352,4.45845634896,4.63859620144,4.31926046295,4.26603650653,3.9344147781,3.87300362839,3.7010521692,3.55775908654,3.56594707984,3.18929138828,3.17700939834,3.05828069557,2.98458715591,2.88223523973,2.77169493025,2.64887263083,2.47692077164,2.48510916494,2.07979469685,2.11664146668,2.25174615604,1.94469000749,2.0838886935,1.75636216171,1.60897508241,1.69904500865,1.54346953605,1.45749400645,1.52709354946,1.31010692715,1.21184900761,1.11359068808,1.25688377073,1.06855592496,1.0030507786,1.09312030484,0.912980852358,0.921168845653,0.892510469121,0.831098919411,0.822910926116,0.667335853517,0.659147460223,0.675523846812,0.638677076986,0.564983537334,0.560889540686,0.442161237913,0.474913611092,0.33980900173,0.540419157449,0.356185308319,0.388938001498,0.282491808667,0.302962231903,0.257927308783,0.204704192367,0.245645038841,0.225174615604,0.216986462309,0.176045615836,0.196516039073,0.159669269246,0.106446192831,0.13919884601,0.13919884601,0.0982579995363,0.0532230764155,0.0614112697102,0.0900698462416,0.0614112697102,0.0491289997681,0.0614112697102,0.0286585885314,0.0286585885314,0.0368467578261,0.012282253942,0.0245645038841,0.0163763345894,0.0163763345894,0.0,0.0,0.00409408464734])

    # Creating a new Canvas
    fig   = plt.figure(figsize=(8,6),dpi=80)
    frame = gridspec.GridSpec(1,1)
    pad   = fig.add_subplot(frame[0])

    # Creating a new Stack
    pad.hist(x=xData, bins=xBinning, weights=y1_sdETA_0_weights,\
             label="$signal$", histtype="stepfilled", rwidth=1.0,\
             color="#5954d8", edgecolor="#5954d8", linewidth=1, linestyle="solid",\
             bottom=None, cumulative=False, normed=False, align="mid", orientation="vertical")


    # Axis
    plt.rc('text',usetex=False)
    plt.xlabel(r"\Delta\eta ( j_{1} , j_{2} ) ",\
               fontsize=16,color="black")
    plt.ylabel(r"$\mathrm{Events}$ $(\mathcal{L}_{\mathrm{int}} = 40.0\ \mathrm{fb}^{-1})$ ",\
               fontsize=16,color="black")

    # Boundary of y-axis
    ymax=(y1_sdETA_0_weights).max()*1.1
    ymin=0 # linear scale
    #ymin=min([x for x in (y1_sdETA_0_weights) if x])/100. # log scale
    plt.gca().set_ylim(ymin,ymax)

    # Log/Linear scale for X-axis
    plt.gca().set_xscale("linear")
    #plt.gca().set_xscale("log",nonposx="clip")

    # Log/Linear scale for Y-axis
    plt.gca().set_yscale("linear")
    #plt.gca().set_yscale("log",nonposy="clip")

    # Saving the image
    plt.savefig('../../HTML/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../PDF/MadAnalysis5job_0/selection_0.png')
    plt.savefig('../../DVI/MadAnalysis5job_0/selection_0.eps')

# Running!
if __name__ == '__main__':
    selection_0()
